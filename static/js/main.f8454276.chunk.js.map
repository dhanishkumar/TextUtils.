{"version":3,"sources":["logo.svg","components/Navbar.js","components/About.js","components/Textsform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","Link","to","title","type","id","onClick","toggleMode","role","htmlFor","About","myStyle","color","backgroundColor","style","Textsform","text","setText","useState","_Fragment","heading","background","value","onChange","handleOnChange","event","target","rows","disabled","length","handleupclick","newText","toUpperCase","showAlert","handleLoclick","toLowerCase","handleClearclick","handleExtraSpaces","split","join","filter","element","defaultProps","Alert","height","alert","word","lower","charAt","slice","capitialize","msg","App","setMode","setAlert","message","setTimeout","BrowserRouter","document","body","Routes","Route","exact","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"mMAAe,I,mBCIA,SAASA,EAAOC,GAC7B,OACEC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCH,EAAMI,KAAI,QAAAD,OAAOH,EAAMI,MAAOC,SAC9EC,eAAA,OAAKJ,UAAU,kBAAiBG,SAAA,CAC9BJ,cAACM,IAAI,CAACL,UAAU,eAAeM,GAAG,IAAGH,SAAEL,EAAMS,QAC7CR,cAAA,UAAQC,UAAU,iBAAiBQ,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAmBL,SAC7MJ,cAAA,QAAMC,UAAU,0BAElBI,eAAA,OAAKJ,UAAU,2BAA2BS,GAAG,yBAAwBN,SAAA,CACnEC,eAAA,MAAIJ,UAAU,kCAAiCG,SAAA,CAC7CJ,cAAA,MAAIC,UAAU,WAAUG,SACtBJ,cAACM,IAAI,CAACL,UAAU,kBAAkB,eAAa,OAAOM,GAAG,IAAGH,SAAC,WAE/DJ,cAAA,MAAIC,UAAU,WAAUG,SACtBJ,cAACM,IAAI,CAACL,UAAU,WAAWM,GAAG,SAAQH,SAAC,eAQ3CC,eAAA,OAAKJ,UAAS,+BAAAC,OAA8C,UAAbH,EAAMI,KAAe,OAAO,SAAUC,SAAA,CACnFJ,cAAA,SAAOC,UAAU,mBAAmBU,QAASZ,EAAMa,WAAYH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BAC9FV,cAAA,SAAOC,UAAU,mBAAmBa,QAAQ,yBAAwBV,SAAC,+BAOnF,CCjCe,SAASW,EAAMhB,GAQ1B,IAAIiB,EAAQ,CACRC,MAAoB,SAAdlB,EAAMI,KAAe,QAAQ,UACnCe,gBAA8B,SAAbnB,EAAMI,KAAc,iBAAiB,SAK1D,OACIE,eAAA,OAAKJ,UAAU,YAAWG,SAAA,CACtBJ,cAAA,MAAIC,UAAU,OAAOkB,MAAO,CAACF,MAAmB,SAAblB,EAAMI,KAAc,QAAQ,WAAWC,SAAC,aAC3EC,eAAA,OAAKJ,UAAU,YAAYS,GAAG,mBAAkBN,SAAA,CAC5CC,eAAA,OAAKJ,UAAU,iBAAgBG,SAAA,CAC3BJ,cAAA,MAAIC,UAAU,mBAAkBG,SAC5BJ,cAAA,UAAQC,UAAU,mBAAmBQ,KAAK,SAAUU,MAAOH,EAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAAaZ,SAC5KJ,cAAA,UAAAI,SAAQ,0BAGZJ,cAAA,OAAKU,GAAG,cAAcT,UAAU,mCAAmC,iBAAe,oBAAmBG,SACjGJ,cAAA,OAAKC,UAAU,iBAAiBkB,MAAOH,EAAQZ,SAAC,sHAKxDC,eAAA,OAAKJ,UAAU,iBAAgBG,SAAA,CAC3BJ,cAAA,MAAIC,UAAU,mBAAkBG,SAC5BJ,cAAA,UAAQC,UAAU,6BAA6BQ,KAAK,SAASU,MAAOH,EAAY,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAaZ,SACzLJ,cAAA,UAAAI,SAAQ,oBAGZJ,cAAA,OAAKU,GAAG,cAAcT,UAAU,8BAA8B,iBAAe,oBAAmBG,SAC5FJ,cAAA,OAAKC,UAAU,iBAAiBkB,MAAOH,EAAQZ,SAAC,2PAKxDC,eAAA,OAAKJ,UAAU,iBAAgBG,SAAA,CAC3BJ,cAAA,MAAIC,UAAU,mBAAkBG,SAC5BJ,cAAA,UAAQC,UAAU,6BAA6BQ,KAAK,SAASU,MAAOH,EAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAAeZ,SAC1LJ,cAAA,UAAAI,SAAQ,2BAGZJ,cAAA,OAAKU,GAAG,gBAAgBT,UAAU,8BAA8B,iBAAe,oBAAmBG,SAC9FJ,cAAA,OAAKC,UAAU,iBAAiBkB,MAAOH,EAAQZ,SAAC,gOAQxE,CC3De,SAASgB,EAAUrB,GAG9B,MA4BMsB,EAAKC,GAASC,mBAAS,IAY7B,OACIlB,eAAAmB,WAAA,CAAApB,SAAA,CACAC,eAAA,OAAKJ,UAAU,YAAYkB,MAAO,CAACF,MAAmB,SAAblB,EAAMI,KAAc,QAAQ,WAAWC,SAAA,CAC5EJ,cAAA,MAAIC,UAAU,OAAMG,SAAEL,EAAM0B,UAC5BzB,cAAA,OAAKC,UAAU,OAAMG,SACjBJ,cAAA,YAAUC,UAAU,eAAekB,MAAO,CAACO,WAAwB,SAAb3B,EAAMI,KAAc,UAAU,QAAQc,MAAmB,SAAblB,EAAMI,KAAc,QAAQ,WAAYwB,MAAON,EAAMO,SAvB9IC,KAEjBP,EAAQQ,MAAMC,OAAOJ,MAAM,EAqB8JjB,GAAG,QAAQsB,KAAK,QAErMhC,cAAA,UAAQiC,SAAwB,IAAdZ,EAAKa,OAAYjC,UAAU,4BAA4BU,QA/C7DwB,KAEhB,IAAIC,EAAUf,EAAKgB,cACnBf,EAAQc,GACRrC,EAAMuC,UAAU,yBAA0B,UAAU,EA2CgDlC,SAAC,wBACjGJ,cAAA,UAAQiC,SAAwB,IAAdZ,EAAKa,OAAYjC,UAAU,4BAA4BU,QA1C7D4B,KAEhB,IAAIH,EAAUf,EAAKmB,cACnBlB,EAAQc,GACRrC,EAAMuC,UAAU,0BAA2B,UAAU,EAsC+ClC,SAAC,wBACjGJ,cAAA,UAAQiC,SAAwB,IAAdZ,EAAKa,OAAYjC,UAAU,4BAA4BU,QAnC1D8B,KAEnBnB,EADa,KAEbvB,EAAMuC,UAAU,gBAAiB,UAAU,EAgC4DlC,SAAC,eACpGJ,cAAA,UAAQiC,SAAwB,IAAdZ,EAAKa,OAAYjC,UAAU,4BAA4BU,QAlBzD+B,KACpB,IAAIN,EAAQf,EAAKsB,MAAM,QACvBrB,EAAQc,EAAQQ,KAAK,MACrB7C,EAAMuC,UAAU,wBAAyB,UAAU,EAeqDlC,SAAC,2BAGzGC,eAAA,OAAKJ,UAAU,iBAAiBkB,MAAO,CAACF,MAAmB,SAAblB,EAAMI,KAAc,QAAQ,WAAWC,SAAA,CACjFJ,cAAA,MAAAI,SAAI,sBAEJC,eAAA,KAAAD,SAAA,CAAIiB,EAAKsB,MAAM,OAAQE,QAAQC,GAAmC,IAAjBA,EAAQZ,SAAaA,OAAO,cAAYb,EAAKa,OAAO,iBACrGlC,cAAA,MAAAI,SAAI,0BAEJC,eAAA,KAAAD,SAAA,CAAI,KAAQiB,EAAKsB,MAAM,KAAKE,QAAQC,GAAmC,IAAjBA,EAAQZ,SAAaA,OAAO,sBAClFlC,cAAA,MAAAI,SAAI,YACJJ,cAAA,KAAAI,SAAIiB,EAAKa,OAAO,EAAEb,EAAK,4BAInC,CFzBAvB,EAAOiD,aAAe,CACpBvC,MAAO,QG5BMwC,MAff,SAAejD,GAKb,OACEC,cAAA,OAAKmB,MAAO,CAAE8B,OAAO,QAAQ7C,SAC1BL,EAAMmD,OAAU7C,eAAA,OAAKJ,UAAS,eAAAC,OAAiBH,EAAMmD,MAAMzC,KAAI,gCAA+BI,KAAK,QAAOT,SAAA,CACvGJ,cAAA,UAAAI,SAPW+C,KACjB,MAAMC,EAAQD,EAAKX,cACnB,OAAOY,EAAMC,OAAO,GAAGhB,cAAgBe,EAAME,MAAM,EAAE,EAKtCC,CAAYxD,EAAMmD,MAAMzC,QAAe,KAAGV,EAAMmD,MAAMM,QAKzE,E,OC+CeC,MAhDf,WAEE,MAAOtD,EAAMuD,GAAWnC,mBAAS,UAiB1B2B,EAAOS,GAAYpC,mBAAS,MAC7Be,EAAYA,CAACsB,EAASnD,KAC1BkD,EAAS,CACPH,IAAKI,EACLnD,KAAMA,IAERoD,YAAW,KACTF,EAAS,KAAK,GACb,KAAK,EAIV,OACE3D,cAAAwB,WAAA,CAAApB,SACEC,eAACyD,IAAa,CAAA1D,SAAA,CACZJ,cAACF,EAAM,CAACU,MAAM,YAAYL,KAAMA,EAAMS,WA/BzBA,KACJ,UAATT,GACFuD,EAAQ,QACRK,SAASC,KAAK7C,MAAMO,WAAa,UACjCY,EAAU,6BAA8B,aAIxCoB,EAAQ,SACRK,SAASC,KAAK7C,MAAMO,WAAa,QACjCY,EAAU,8BAA+B,WAE3C,IAoBItC,cAACgD,EAAK,CAACE,MAAOA,IACdlD,cAAA,OAAKC,UAAU,iBAAgBG,SAE7BC,eAAC4D,IAAM,CAAA7D,SAAA,CACLJ,cAACkE,IAAK,CAACC,OAAK,EAACC,KAAK,SAAStB,QAAS9C,cAACe,EAAK,CAACZ,KAAMA,MACjDH,cAACkE,IAAK,CAACC,OAAK,EAACC,KAAK,IAAItB,QAAS9C,cAACoB,EAAS,CAACkB,UAAWA,EAAWb,QAAQ,mEAAmEtB,KAAMA,eAM7J,EChDekE,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHWS,IAASC,WAAWjB,SAASkB,eAAe,SACpDC,OACHlF,cAACmF,IAAMC,WAAU,CAAAhF,SACfJ,cAACyD,EAAG,OAORY,G","file":"static/js/main.f8454276.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\" role=\"search\">\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n          </form> */}\n\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n          </div>\n\n        </div>\n      </div>\n    </nav>\n  )\n}\n\n// propstype \nNavbar.propTypes = {\n  title: PropTypes.string.isRequired\n}\n\n\n// defaultprops \nNavbar.defaultProps = {\n  title: 'text'\n};\n","import React,{useState} from 'react'\n\nexport default function About(props) {\n\n    // mystyle update to setmystyle using usestate\n    // const [myStyle,setMyStyle]=useState({\n    //     color:'black',\n    //     backgroundColor:'white'\n    // })\n\n    let myStyle={\n        color:props.mode ==='dark'?'white':'#042743',\n        backgroundColor: props.mode==='dark'?'rgb(36 74 104)':'white'\n    }\n    \n    \n\n    return (\n        <div className='container'>\n            <h1 className=\"my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>About Us</h1>\n            <div className=\"accordion\" id=\"accordionExample\">\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                        <strong>Analyze Your text</strong>\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                        Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle}    data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                        <strong>Free to use</strong>\n                        </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                        Textutils is a free character counter tool that provides instant character count & word count statistics for a given text. Textutils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                        <strong>Browser Compatible</strong>\n                        </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                        This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React ,{useState}from 'react'\nexport default function Textsform(props) {\n\n    // onclick function for button click change text \n    const handleupclick=()=>{\n        // console.log(\"Uppercase was clicked\" + text);\n        let newText = text.toUpperCase();  //create new variable to update setText\n        setText(newText)\n        props.showAlert(\"Convered to uppercase!\", \"success\");\n    }\n    const handleLoclick=()=>{\n        // console.log(\"Lowercase was clicked\" + text);\n        let newText = text.toLowerCase();  //create new variable to update setText\n        setText(newText)\n        props.showAlert(\"Convered to lowerrcase!\", \"success\");\n    }\n\n    // clear all text\n    const handleClearclick=()=>{\n        let newText =' ';\n        setText(newText)\n        props.showAlert(\"Text cleared!\", \"success\");\n    }\n\n    \n    // onchange function use to write (without onchange function i can write in textarea)\n    const handleOnChange=()=>{\n        // console.log(\"On Change\");\n        setText(event.target.value)  //to write the text and update in textarea\n    }\n\n\n    const[text,setText]=useState('');\n    // setText(\"New text\")  correct way to change state \n\n    // Remove extra spaces \n    const handleExtraSpaces=()=>{\n        let newText=text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    // clear all text\n    \n    return (\n        <>\n        <div className='container' style={{color:props.mode==='dark'?'white':'#042743'}}>\n            <h1 className='mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" style={{background:props.mode==='dark'?'#13466e':'white',color:props.mode==='dark'?'white':'#042743'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleupclick}>Conver to Uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLoclick}>Conver to Lowercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleClearclick}>Clear text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\n            <h1>Youe Text Summary</h1>\n            {/* calculate words and characters  */}\n            <p>{text.split(/\\s+/ ).filter((element)=>{return element.length!==0}).length} Words and {text.length} Characters</p> \n            <h2>How much time to read</h2>\n            {/* calculate read time  */}\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes To Read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Nothing to preview\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react';\n\nfunction Alert(props) {\nconst capitialize = (word)=>{\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n}\n  return (\n    <div style={{ height:'50px'}}>\n      {props.alert && (<div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\n          <strong>{capitialize(props.alert.type)}</strong>: {props.alert.msg}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Alert;","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport Textsform from './components/Textsform';\nimport Alert from './components/Alert';\n\n// import router \nimport { BrowserRouter, Route, Routes, link } from \"react-router-dom\";\n\n\n\nimport React, { use, useState } from 'react'\n\nfunction App() {\n  // enable dark mode \n  const [mode, setMode] = useState('light');\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.background = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      // document.title = 'Textutils-Dark mode';  //  to change the title \n    }\n    else {\n      setMode('light');\n      document.body.style.background = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n      // document.title = 'Textutils-Light mode';   //  to change the title \n    }\n  }\n\n  // show alert \n  const [alert, setAlert] = useState(null);  //alert is a object\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n\n  return (\n    <>\n      <BrowserRouter>\n        <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className='container my-3'>\n          {/* <Textsform showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/> */}\n          <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} />}/>\n            <Route exact path=\"/\" element={<Textsform showAlert={showAlert} heading=\"TextUtils - word Counter, Character Counter, Remove extra spaces\" mode={mode} />} />\n          </Routes>\n        </div>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}